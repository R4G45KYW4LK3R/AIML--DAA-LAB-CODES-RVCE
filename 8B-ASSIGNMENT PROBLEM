//8B

#include <stdio.h>
#include <stdbool.h>

#define N 4
#define INF 99999

int findMin(int arr[], bool seen[]) {
    int min = INF, minIndex = -1;
    for (int i = 0; i < N; i++) {
        if (!seen[i] && arr[i] < min) {
            min = arr[i];
            minIndex = i;
        }
    }
    return minIndex;
}

int hungarianAlgorithm(int costMatrix[N][N]) {
    int u[N] = {0}, v[N] = {0}, p[N], way[N], minv[N];
    bool seen[N];

    for (int i = 0; i < N; i++) {
        p[0] = i;
        for (int j = 0; j < N; j++) {
            minv[j] = INF;
            seen[j] = false;
        }

        int j0 = 0;
        do {
            seen[j0] = true;
            int i0 = p[j0], delta = INF, j1 = -1;
            for (int j = 1; j < N; j++) {
                if (!seen[j]) {
                    int cur = costMatrix[i0][j] - u[i0] - v[j];
                    if (cur < minv[j]) {
                        minv[j] = cur;
                        way[j] = j0;
                    }
                    if (minv[j] < delta) {
                        delta = minv[j];
                        j1 = j;
                    }
                }
            }
            for (int j = 0; j < N; j++) {
                if (seen[j]) {
                    u[p[j]] += delta;
                    v[j] -= delta;
                } else {
                    minv[j] -= delta;
                }
            }
            j0 = j1;
        } while (p[j0] != 0);

        do {
            int j1 = way[j0];
            p[j0] = p[j1];
            j0 = j1;
        } while (j0);
    }

    int result = -v[0];
    printf("Optimal assignment:\n");
    for (int j = 1; j < N; j++) {
        printf("Worker %d assigned to job %d\n", p[j] + 1, j + 1);
    }
    return result;
}

int main() {
    int costMatrix[N][N];
    printf("Enter the cost matrix (size %dx%d):\n", N, N);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            scanf("%d", &costMatrix[i][j]);
        }
    }

    int minCost = hungarianAlgorithm(costMatrix);
    printf("Minimum cost: %d\n", minCost);

    return 0;
}

